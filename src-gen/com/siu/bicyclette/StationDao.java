package com.siu.bicyclette;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.siu.bicyclette.Station;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table stations.
*/
public class StationDao extends AbstractDao<Station, Long> {

    public static final String TABLENAME = "stations";

    /**
     * Properties of entity Station.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Address = new Property(2, String.class, "address", false, "address");
        public final static Property City = new Property(3, String.class, "city", false, "city");
        public final static Property CoordLat = new Property(4, Double.class, "coordLat", false, "lat");
        public final static Property CoordLong = new Property(5, Double.class, "coordLong", false, "long");
        public final static Property Total = new Property(6, Integer.class, "total", false, "total");
        public final static Property Free = new Property(7, Integer.class, "free", false, "free");
        public final static Property Available = new Property(8, Integer.class, "available", false, "available");
        public final static Property Datetime = new Property(9, java.util.Date.class, "datetime", false, "datetime");
        public final static Property Open = new Property(10, Boolean.class, "open", false, "open");
        public final static Property Bonus = new Property(11, Boolean.class, "bonus", false, "bonus");
    };


    public StationDao(DaoConfig config) {
        super(config);
    }
    
    public StationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'stations' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'name' TEXT," + // 1: name
                "'address' TEXT," + // 2: address
                "'city' TEXT," + // 3: city
                "'lat' REAL," + // 4: coordLat
                "'long' REAL," + // 5: coordLong
                "'total' INTEGER," + // 6: total
                "'free' INTEGER," + // 7: free
                "'available' INTEGER," + // 8: available
                "'datetime' INTEGER," + // 9: datetime
                "'open' INTEGER," + // 10: open
                "'bonus' INTEGER);"); // 11: bonus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'stations'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Station entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        Double coordLat = entity.getCoordLat();
        if (coordLat != null) {
            stmt.bindDouble(5, coordLat);
        }
 
        Double coordLong = entity.getCoordLong();
        if (coordLong != null) {
            stmt.bindDouble(6, coordLong);
        }
 
        Integer total = entity.getTotal();
        if (total != null) {
            stmt.bindLong(7, total);
        }
 
        Integer free = entity.getFree();
        if (free != null) {
            stmt.bindLong(8, free);
        }
 
        Integer available = entity.getAvailable();
        if (available != null) {
            stmt.bindLong(9, available);
        }
 
        java.util.Date datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindLong(10, datetime.getTime());
        }
 
        Boolean open = entity.getOpen();
        if (open != null) {
            stmt.bindLong(11, open ? 1l: 0l);
        }
 
        Boolean bonus = entity.getBonus();
        if (bonus != null) {
            stmt.bindLong(12, bonus ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Station readEntity(Cursor cursor, int offset) {
        Station entity = new Station( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // coordLat
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // coordLong
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // total
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // free
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // available
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // datetime
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // open
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // bonus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Station entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoordLat(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setCoordLong(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTotal(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFree(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAvailable(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDatetime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setOpen(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setBonus(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Station entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Station entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
