package com.siu.bicyclette;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.siu.bicyclette.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Lat = new Property(3, Double.class, "lat", false, "LAT");
        public final static Property Long = new Property(4, Double.class, "long", false, "LONG");
        public final static Property Total = new Property(5, Integer.class, "total", false, "TOTAL");
        public final static Property Free = new Property(6, Integer.class, "free", false, "FREE");
        public final static Property Available = new Property(7, Integer.class, "available", false, "AVAILABLE");
        public final static Property Datetime = new Property(8, java.util.Date.class, "datetime", false, "DATETIME");
        public final static Property Open = new Property(9, Boolean.class, "open", false, "OPEN");
        public final static Property Bonus = new Property(10, Boolean.class, "bonus", false, "BONUS");
        public final static Property Fav = new Property(11, Boolean.class, "fav", false, "FAV");
        public final static Property Notif = new Property(12, Boolean.class, "notif", false, "NOTIF");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'ADDRESS' TEXT," + // 2: address
                "'LAT' REAL," + // 3: lat
                "'LONG' REAL," + // 4: long
                "'TOTAL' INTEGER," + // 5: total
                "'FREE' INTEGER," + // 6: free
                "'AVAILABLE' INTEGER," + // 7: available
                "'DATETIME' INTEGER," + // 8: datetime
                "'OPEN' INTEGER," + // 9: open
                "'BONUS' INTEGER," + // 10: bonus
                "'FAV' INTEGER," + // 11: fav
                "'NOTIF' INTEGER);"; // 12: notif
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(4, lat);
        }
 
        Double long = entity.getLong();
        if (long != null) {
            stmt.bindDouble(5, long);
        }
 
        Integer total = entity.getTotal();
        if (total != null) {
            stmt.bindLong(6, total);
        }
 
        Integer free = entity.getFree();
        if (free != null) {
            stmt.bindLong(7, free);
        }
 
        Integer available = entity.getAvailable();
        if (available != null) {
            stmt.bindLong(8, available);
        }
 
        java.util.Date datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindLong(9, datetime.getTime());
        }
 
        Boolean open = entity.getOpen();
        if (open != null) {
            stmt.bindLong(10, open ? 1l: 0l);
        }
 
        Boolean bonus = entity.getBonus();
        if (bonus != null) {
            stmt.bindLong(11, bonus ? 1l: 0l);
        }
 
        Boolean fav = entity.getFav();
        if (fav != null) {
            stmt.bindLong(12, fav ? 1l: 0l);
        }
 
        Boolean notif = entity.getNotif();
        if (notif != null) {
            stmt.bindLong(13, notif ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lat
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // long
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // total
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // free
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // available
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // datetime
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // open
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // bonus
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // fav
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // notif
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLong(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setTotal(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFree(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAvailable(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDatetime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setOpen(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setBonus(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setFav(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setNotif(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
